(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{371:function(e,t,_){"use strict";_.r(t);var v=_(42),n=Object(v.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),_("p",[e._v("OpenNCC View是一款用于快速体验OpenNCC开发套件的软件，运行OpenNCC View下默认模型不依赖OpenVINO，OpenNCC View集成了OpenNCC CDK全部API,可以完成OpenNCC在独立模式下实现对相机的连接,固件和AI模型的下载，及完成视频流显示与算法结果的后处理。用户可以通过友好的界面，来操作和控制相机."),_("br"),e._v(" "),_("img",{attrs:{src:"/openncc/docimg/zh/NccViewF1.png",alt:"Figure-1"}})]),e._v(" "),_("h2",{attrs:{id:"运行环境与安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行环境与安装"}},[e._v("#")]),e._v(" 运行环境与安装")]),e._v(" "),_("ul",[_("li",[e._v("操作系统：Ubuntu16.04(64 bit)、Ubuntu18.04 (64 bit)")]),e._v(" "),_("li",[e._v("编译环境：QT 5.9.9及以上")])]),e._v(" "),_("h3",{attrs:{id:"qt安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#qt安装"}},[e._v("#")]),e._v(" QT安装")]),e._v(" "),_("p",[_("a",{attrs:{href:"http://download.qt.io/archive/qt/",target:"_blank",rel:"noopener noreferrer"}},[e._v("QT下载地址"),_("OutboundLink")],1),_("br"),e._v("\n开发所用版本为QT5.12.7，尽量保持一致。下载linux安装包后，添加可执行权限，然后运行。"),_("br"),e._v("\n安装按默认路径即可，断网安装不用登陆账号，否则需要注册验证后完成安装。"),_("br"),e._v("\nQT安装完成后运行简单的例子，如果编译会出现"),_("code",[e._v('"cannot find -lGL"')]),e._v("错误："),_("br"),e._v("\n可以使用"),_("code",[e._v("locate libGL*")]),e._v("查找"),_("code",[e._v("libGL.so")]),e._v("文件，再用管理员权限添加软链接，链接到/usr/lib目录"),_("code",[e._v("locate libGL*")]),e._v("，\n"),_("code",[e._v("sudo ln -s /usr/lib/xxx/libGL.so.1 /usr/lib/libGL.so")])]),e._v(" "),_("h3",{attrs:{id:"安装依赖包"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装依赖包"}},[e._v("#")]),e._v(" 安装依赖包")]),e._v(" "),_("ul",[_("li",[e._v("OpenCV"),_("br"),e._v(" "),_("code",[e._v("sudo apt-get update")]),_("br"),e._v(" "),_("code",[e._v("sudo apt-get install libcv-dev")]),_("br"),e._v(" "),_("code",[e._v("sudo apt-get install libopencv-dev")])]),e._v(" "),_("li",[e._v("安装libsub1.0"),_("br"),e._v(" "),_("code",[e._v("sudo apt-get install libusb-dev")]),_("br"),e._v(" "),_("code",[e._v("sudo apt-get install libusb-1.0-0-dev")])]),e._v(" "),_("li",[e._v("安装ffmpeg"),_("br"),e._v(" "),_("code",[e._v("sudo apt-get install ffmpeg")])])]),e._v(" "),_("h3",{attrs:{id:"编译view工程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编译view工程"}},[e._v("#")]),e._v(" 编译View工程")]),e._v(" "),_("ol",[_("li",[e._v("使用Qt Creator打开"),_("code",[e._v("View/Linux/OpenNCC/OpenNCC")]),e._v("的"),_("code",[e._v("OpenNCC.pro")]),e._v("工程")]),e._v(" "),_("li",[e._v("编译工程")]),e._v(" "),_("li",[e._v("将"),_("code",[e._v("View/Linux/OpenNCC/Configuration")]),e._v("目录拷贝到编译运行目录下，如"),_("code",[e._v("build-OpenNCC-Desktop_Qt_5_12_7_GCC_64bit-Debug")])]),e._v(" "),_("li",[e._v("开始调试、运行程序")])]),e._v(" "),_("h2",{attrs:{id:"运行与功能"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#运行与功能"}},[e._v("#")]),e._v(" 运行与功能")]),e._v(" "),_("h3",{attrs:{id:"_1-openncc相机运行权限"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-openncc相机运行权限"}},[e._v("#")]),e._v(" 1. OpenNCC相机运行权限")]),e._v(" "),_("p",[e._v("请进入CDK目录：Tools/deployment下，运行脚本“install_NCC_udev_rules.sh”，在终端下输入："),_("br"),e._v("\n./install_NCC_udev_rules.sh"),_("br"),e._v("\n获取相机挂载权限,成功后需要重启电脑。"),_("br"),e._v(" "),_("img",{attrs:{src:"/openncc/docimg/zh/GettingStartF2.png",alt:"Figure-2"}})]),e._v(" "),_("h3",{attrs:{id:"_2-解压openncc-view软件-进入目录下-打开终端-输入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-解压openncc-view软件-进入目录下-打开终端-输入"}},[e._v("#")]),e._v(" 2. 解压OpenNCC View软件，进入目录下，打开终端，输入：")]),e._v(" "),_("p",[_("code",[e._v("./AppRun")]),e._v("，启动软件。（如果无法运行，输入:"),_("code",[e._v("sudo ./AppRun")]),e._v("再次尝试 ）"),_("br"),e._v("\nOpenNCC View软件成功启动后，接下来可以操作实现相机和View之间的交互，操作步骤："),_("br"),e._v("\n* 把OpenNCC相机连接到电脑usb3.0接口，点击 "),_("code",[e._v("Get device info")]),e._v(" 按钮获取设备信息，此时log区域会显示设备信息，如果提示连接不是3.0，请把OpenNCC相机Type-C接口连接的数据线旋转180°再次插入，点击"),_("code",[e._v("Get device info")]),e._v(" 按钮获取设备信息。确保log显示为:"),_("code",[e._v("USB interface is 3.0")]),e._v(" ，如果显示不是3.0也能正常使用，但传输速率会下降,实际运行于USB2.0模式"),_("br"),e._v("\n* 任意选择一种出流格式 yuv420p/H.264/mjpeg，分辨率默认为1080p"),_("br"),e._v("\n* 点击加载模型 "),_("code",[e._v("“1st network model”")]),e._v("：选择算法模型，目前支持10多种模型可选，选择None即不加载模型，仅出流显示视频，而选择加载算法模型后，可以通过框选ROI区域，框选出区域，算法只对区域内的场景进行识别。"),_("br"),e._v("\n* “Model Score” 是算法识别的最低分数，达到后算法才会在画面中框选出物体;"),_("br"),e._v("\n* ”Display Scaler” 是视频显示窗体大小，可以调节显示窗口分辨率"),_("br"),e._v("\n* 点击”Start running models”，加载算法模型，成功打开视频流。"),_("br"),e._v("\n运行视频流，加载人脸检测算法成功后实拍截图："),_("br"),e._v(" "),_("img",{attrs:{src:"/openncc/docimg/zh/GettingStartF3.png",alt:"Figure-3"}})]),e._v(" "),_("h4",{attrs:{id:"_2-1-二级模型演示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二级模型演示"}},[e._v("#")]),e._v(" 2.1 二级模型演示")]),e._v(" "),_("ul",[_("li",[e._v("在"),_("code",[e._v("“1st network model”")]),e._v("下拉菜单中选择"),_("code",[e._v("vehicle-license-plate-detection-barrier-0106-fp16.blob")])]),e._v(" "),_("li",[e._v("选择后，"),_("code",[e._v("2nd network model")]),e._v("下可选择需要的模型，目前演示只支持一个二级模型(车牌识别)。用户需要可以自行添加。")])]),e._v(" "),_("h3",{attrs:{id:"_3-模型解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-模型解析"}},[e._v("#")]),e._v(" 3. 模型解析")]),e._v(" "),_("p",[e._v("模型在OpenNCC完成推演后，通过OpenNCC CDK API获取实时的推演结果，OpenView针对物体检测这类模型"),_("a",{attrs:{href:"https://docs.openvinotoolkit.org/2019_R1.1/usergroup1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Object Detection Models"),_("OutboundLink")],1),e._v("实现了推演结果的通用解析器。"),_("br"),e._v("\nOpenView的推演后处理支持如下格式输出：")]),e._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",[_("code",[e._v("输出的数据形态：[1, 1, N, 7]\nN是当前帧下检测到的物体框数量\n对于每个检测框，包含以下信息格式：[image_id, label, conf, x_min, y_min, x_max, y_max], 其中:\n    image_id - ID of the image in the batch\n    label - predicted class ID\n    conf - confidence for the predicted class\n    (x_min, y_min) - coordinates of the top left bounding box corner\n    (x_max, y_max) - coordinates of the bottom right bounding box corner.  \n")])])]),_("p",[e._v("用户可以训练自己的模型，并将输出层按照以上格式定义，可以免编程使用OpenView的模型导入功能添加并测试物体检测模型。如果用户需要添加其他输出格式的模型，需要自己参考ncc_cdk/Samples/How_to/load a model并结合自己应用场景来编写解析代码。")]),e._v(" "),_("h3",{attrs:{id:"_4-功能点详细介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-功能点详细介绍"}},[e._v("#")]),e._v(" 4. 功能点详细介绍")]),e._v(" "),_("p",[e._v("1）Get Device Info：获取设备与电脑usb连接信息及NCC设备模块信息，若连接的设备支持，能够解锁更多功能选项。（例如NCC与电脑通过usb 3.0连接，可解锁yuv出流显示视频；NCC装配了4K模组，可解锁4K分辨率显示）")]),e._v(" "),_("p",[e._v("2）Stream Format：选择NCC相机USB视频输出格式，目前支持YUV420P，H.264，MJPEG格式。（选择YUV420P前需先点击Get Device Info，仅在usb 3.0连接时可选）")]),e._v(" "),_("p",[e._v("3）Stream Resolution：更换NCC相机的视频分辨率，可选1080P或4K. 4K分辨率支持需要选装相应4K摄像模块。 （选择4K前需先Get Device Info，仅在模组支持4K时可选）")]),e._v(" "),_("p",[e._v("4）1st network model：选择算法模型，选择None即不加载模型，仅出流显示视频，而选择加载算法模型后，可以通过框选ROI区域，仅对区域内的场景进行识别。")]),e._v(" "),_("p",[e._v("5）Model Score：加载算法后，对物品的识别计算结果是有分数的，当超过了某一分数阈值，才会在视频中框选，而Model Score即为控制阈值的选项，根据用户需求，实时调整识别的最低分数（默认值为0.5）")]),e._v(" "),_("p",[e._v("6）ROI：配合算法模型使用，加载模型后，如果需要仅对某一区域进行算法识别，可以手动点击鼠标左键拖动，框选出自己感兴趣的区域，仅对区域内的场景进行识别")]),e._v(" "),_("p",[e._v("7）Display Scaler：视频显示时，由于不同电脑的分辨率不同，按原本尺寸显示1080P或4K的视频，可能会出现视频大小超出桌面大小的情况，用户可通过Display Scaler实时控制视频显示窗体大小（默认值为0.5）")]),e._v(" "),_("p",[e._v('8）Add model：点击"add model"  ，导入生成好的.blob模型文件，此处注意，需要把.blob文件和对应的IR文件(.xml&&.bin)放在同一位置，且文件名相同。.blob文件的生成过程参考开发手册。添加后即可在1st network model中选择对应模型。')]),e._v(" "),_("p",[e._v("9）Del model：删除用户导入的模型文件，删除后即会在1st network model中移除用户自己的模型。")]),e._v(" "),_("p",[e._v("10）Start running model：点击即开始加载固件，并根据用户的选项，显示视频窗口")]),e._v(" "),_("p",[e._v("11）Log：显示NCC工作时的log，用户可在此处查看设备的运行状况，以及关于设备异常状态的提示信息")]),e._v(" "),_("p",[e._v("12）Algo Results：显示算法结果，当用户选择加载算法模型，且在实际场景中有被识别到的算法模型，即会有算法结果在此处打印（如被识别模型相对当前窗口的坐标信息，及算法计算出的识别分数等）")])])}),[],!1,null,null,null);t.default=n.exports}}]);